Index: ports/rp2/tusb_config.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ports/rp2/tusb_config.h b/ports/rp2/tusb_config.h
--- a/ports/rp2/tusb_config.h	(revision 7c51cb2307eaca1a1ccc071e0bb5eb4a5f734610)
+++ b/ports/rp2/tusb_config.h	(date 1615922170754)
@@ -27,7 +27,7 @@
 
 #define CFG_TUSB_RHPORT0_MODE   (OPT_MODE_DEVICE)
 
-#define CFG_TUD_CDC             (1)
+#define CFG_TUD_CDC             (2)
 #define CFG_TUD_CDC_RX_BUFSIZE  (256)
 #define CFG_TUD_CDC_TX_BUFSIZE  (256)
 
Index: ports/rp2/main.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ports/rp2/main.c b/ports/rp2/main.c
--- a/ports/rp2/main.c	(revision 7c51cb2307eaca1a1ccc071e0bb5eb4a5f734610)
+++ b/ports/rp2/main.c	(date 1626109090772)
@@ -44,6 +44,9 @@
 #include "pico/stdlib.h"
 #include "pico/binary_info.h"
 #include "hardware/rtc.h"
+
+#include "canis/rp2_can.h"
+#include "ports/rp2/canis/rp2_min.h"
 #include "hardware/structs/rosc.h"
 
 extern uint8_t __StackTop, __StackBottom;
@@ -59,6 +62,10 @@
     BI_NAMED_GROUP_SEPARATE_COMMAS | BI_NAMED_GROUP_SORT_ALPHA));
 
 int main(int argc, char **argv) {
+    // TODO make these conditionally compiled in with PicoCAN support if this port is pushed upstream
+    can_init();
+    min_init();
+
     #if MICROPY_HW_ENABLE_UART_REPL
     bi_decl(bi_program_feature("UART REPL"))
     setup_default_uart();
@@ -138,6 +145,8 @@
         mp_printf(MP_PYTHON_PRINTER, "MPY: soft reboot\n");
         rp2_pio_deinit();
         machine_pin_deinit();
+        can_deinit();
+        min_deinit();
         #if MICROPY_PY_THREAD
         mp_thread_deinit();
         #endif
Index: ports/rp2/mpconfigport.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ports/rp2/mpconfigport.h b/ports/rp2/mpconfigport.h
--- a/ports/rp2/mpconfigport.h	(revision 7c51cb2307eaca1a1ccc071e0bb5eb4a5f734610)
+++ b/ports/rp2/mpconfigport.h	(date 1625827751311)
@@ -163,6 +163,9 @@
 extern const struct _mp_obj_module_t mp_module_uos;
 extern const struct _mp_obj_module_t mp_module_utime;
 
+extern const struct _mp_obj_type_t rp2_canhack_type;
+extern const struct _mp_obj_type_t rp2_can_type;
+
 #define MICROPY_PORT_BUILTIN_MODULES \
     { MP_OBJ_NEW_QSTR(MP_QSTR_machine), (mp_obj_t)&mp_module_machine }, \
     { MP_OBJ_NEW_QSTR(MP_QSTR__onewire), (mp_obj_t)&mp_module_onewire }, \
@@ -174,6 +177,8 @@
     const char *readline_hist[8]; \
     void *machine_pin_irq_obj[30]; \
     void *rp2_pio_irq_obj[2]; \
+    struct _rp2_can_obj_t *rp2_can_obj; \
+    struct _rp2_min_obj_t *rp2_min_obj; \
     void *rp2_state_machine_irq_obj[8]; \
     void *rp2_uart_rx_buffer[2]; \
     void *rp2_uart_tx_buffer[2]; \
Index: ports/rp2/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ports/rp2/CMakeLists.txt b/ports/rp2/CMakeLists.txt
--- a/ports/rp2/CMakeLists.txt	(revision 7c51cb2307eaca1a1ccc071e0bb5eb4a5f734610)
+++ b/ports/rp2/CMakeLists.txt	(date 1626109989908)
@@ -39,7 +39,7 @@
 endif()
 
 # Include board config
-include(${MICROPY_BOARD_DIR}/mpconfigboard.cmake) 
+include(${MICROPY_BOARD_DIR}/mpconfigboard.cmake)
 
 # Include component cmake fragments
 include(${MICROPY_DIR}/py/py.cmake)
@@ -74,6 +74,7 @@
     ${MICROPY_DIR}/lib/utils/pyexec.c
     ${MICROPY_DIR}/lib/utils/stdout_helpers.c
     ${MICROPY_DIR}/lib/utils/sys_stdio_mphal.c
+    ${MICROPY_DIR}/lib/min/target/min.c
 )
 
 set(MICROPY_SOURCE_DRIVERS
@@ -102,6 +103,11 @@
     rp2_pio.c
     tusb_port.c
     uart.c
+    canis/common.c
+    canis/canhack.c
+    canis/rp2_canhack.c
+    canis/rp2_can.c
+    canis/rp2_min.c
 )
 
 set(MICROPY_SOURCE_QSTR
@@ -125,6 +131,9 @@
     ${PROJECT_SOURCE_DIR}/modutime.c
     ${PROJECT_SOURCE_DIR}/rp2_flash.c
     ${PROJECT_SOURCE_DIR}/rp2_pio.c
+    ${PROJECT_SOURCE_DIR}/canis/rp2_canhack.c
+    ${PROJECT_SOURCE_DIR}/canis/rp2_can.c
+    ${PROJECT_SOURCE_DIR}/canis/rp2_min.c
 )
 
 set(PICO_SDK_COMPONENTS
Index: ports/rp2/tusb_port.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ports/rp2/tusb_port.c b/ports/rp2/tusb_port.c
--- a/ports/rp2/tusb_port.c	(revision 7c51cb2307eaca1a1ccc071e0bb5eb4a5f734610)
+++ b/ports/rp2/tusb_port.c	(date 1626109313706)
@@ -27,26 +27,41 @@
 #include "tusb.h"
 #include "pico/unique_id.h"
 
-#define USBD_VID (0x2E8A) // Raspberry Pi
-#define USBD_PID (0x0005) // RP2 MicroPython
+#define USBD_VID                    (0x2E8AU) // Raspberry Pi
+#define USBD_PID                    (0x0005U) // RP2 MicroPython
+
+#define USBD_DESC_LEN               (TUD_CONFIG_DESC_LEN + (CFG_TUD_CDC * TUD_CDC_DESC_LEN))
+#define USBD_MAX_POWER_MA           (250U)
 
-#define USBD_DESC_LEN (TUD_CONFIG_DESC_LEN + TUD_CDC_DESC_LEN)
-#define USBD_MAX_POWER_MA (250)
+enum
+{
+    USBD_ITF_CDC_0 = 0,
+    USBD_ITF_CDC_0_DATA,
+    USBD_ITF_CDC_1,
+    USBD_ITF_CDC_1_DATA,
+    USBD_ITF_MAX
+};
 
-#define USBD_ITF_CDC (0) // needs 2 interfaces
-#define USBD_ITF_MAX (2)
+#define USBD_ITF_CDC_0              (0) // needs 2 interfaces
+#define USBD_ITF_CDC_1              (2U)
+#define USBD_ITF_MAX                (4U)
 
-#define USBD_CDC_EP_CMD (0x81)
-#define USBD_CDC_EP_OUT (0x02)
-#define USBD_CDC_EP_IN (0x82)
-#define USBD_CDC_CMD_MAX_SIZE (8)
-#define USBD_CDC_IN_OUT_MAX_SIZE (64)
+#define USBD_CDC_0_EP_CMD           (0x81U)
+#define USBD_CDC_0_EP_OUT           (0x02U)
+#define USBD_CDC_0_EP_IN            (0x82U)
+
+#define USBD_CDC_1_EP_CMD           (0x83U)
+#define USBD_CDC_1_EP_OUT           (0x04U)
+#define USBD_CDC_1_EP_IN            (0x84U)
+
+#define USBD_CDC_CMD_MAX_SIZE       (8U)
+#define USBD_CDC_IN_OUT_MAX_SIZE    (64U)
 
-#define USBD_STR_0 (0x00)
-#define USBD_STR_MANUF (0x01)
-#define USBD_STR_PRODUCT (0x02)
-#define USBD_STR_SERIAL (0x03)
-#define USBD_STR_CDC (0x04)
+#define USBD_STR_0                  (0x00)
+#define USBD_STR_MANUF              (0x01U)
+#define USBD_STR_PRODUCT            (0x02U)
+#define USBD_STR_SERIAL             (0x03U)
+#define USBD_STR_CDC                (0x04U)
 
 // Note: descriptors returned from callbacks must exist long enough for transfer to complete
 
@@ -67,12 +82,15 @@
     .bNumConfigurations = 1,
 };
 
-static const uint8_t usbd_desc_cfg[USBD_DESC_LEN] = {
-    TUD_CONFIG_DESCRIPTOR(1, USBD_ITF_MAX, USBD_STR_0, USBD_DESC_LEN,
-        0, USBD_MAX_POWER_MA),
+static const uint8_t usbd_desc_cfg[] = {
+    // Config number, interface count, string index, total length, attribute, power in mA
+    TUD_CONFIG_DESCRIPTOR(1, USBD_ITF_MAX, USBD_STR_0, USBD_DESC_LEN, 0, USBD_MAX_POWER_MA),
 
-    TUD_CDC_DESCRIPTOR(USBD_ITF_CDC, USBD_STR_CDC, USBD_CDC_EP_CMD,
-        USBD_CDC_CMD_MAX_SIZE, USBD_CDC_EP_OUT, USBD_CDC_EP_IN, USBD_CDC_IN_OUT_MAX_SIZE),
+    // 1st CDC: Interface number, string index, EP notification address and size, EP data address (out, in) and size.
+    TUD_CDC_DESCRIPTOR(USBD_ITF_CDC_0, USBD_STR_CDC, USBD_CDC_0_EP_CMD, USBD_CDC_CMD_MAX_SIZE, USBD_CDC_0_EP_OUT, USBD_CDC_0_EP_IN, USBD_CDC_IN_OUT_MAX_SIZE),
+
+    // 2nd CDC: Interface number, string index, EP notification address and size, EP data address (out, in) and size.
+    TUD_CDC_DESCRIPTOR(USBD_ITF_CDC_1, USBD_STR_CDC, USBD_CDC_1_EP_CMD, USBD_CDC_CMD_MAX_SIZE, USBD_CDC_1_EP_OUT, USBD_CDC_1_EP_IN, USBD_CDC_IN_OUT_MAX_SIZE),
 };
 
 static const char *const usbd_desc_str[] = {
@@ -114,9 +132,9 @@
                 desc_str[1 + len + 1] = hexdig[id.id[len >> 1] & 0x0f];
             }
         } else {
-            const char *str = usbd_desc_str[index];
-            for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
-                desc_str[1 + len] = str[len];
+        const char *str = usbd_desc_str[index];
+        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
+            desc_str[1 + len] = str[len];
             }
         }
     }
Index: ports/rp2/modrp2.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ports/rp2/modrp2.c b/ports/rp2/modrp2.c
--- a/ports/rp2/modrp2.c	(revision 7c51cb2307eaca1a1ccc071e0bb5eb4a5f734610)
+++ b/ports/rp2/modrp2.c	(date 1625827751311)
@@ -24,6 +24,8 @@
  * THE SOFTWARE.
  */
 
+#include <canis/rp2_can.h>
+#include <ports/rp2/canis/rp2_min.h>
 #include "py/runtime.h"
 #include "modrp2.h"
 
@@ -32,6 +34,13 @@
     { MP_ROM_QSTR(MP_QSTR_Flash),               MP_ROM_PTR(&rp2_flash_type) },
     { MP_ROM_QSTR(MP_QSTR_PIO),                 MP_ROM_PTR(&rp2_pio_type) },
     { MP_ROM_QSTR(MP_QSTR_StateMachine),        MP_ROM_PTR(&rp2_state_machine_type) },
+    { MP_ROM_QSTR(MP_QSTR_CANHack),             MP_ROM_PTR(&rp2_canhack_type) },
+    { MP_ROM_QSTR(MP_QSTR_CAN),                 MP_ROM_PTR(&rp2_can_type) },
+    { MP_ROM_QSTR(MP_QSTR_CANID),               MP_ROM_PTR(&rp2_canid_type) },
+    { MP_ROM_QSTR(MP_QSTR_CANFrame),            MP_ROM_PTR(&rp2_canframe_type) },
+    { MP_ROM_QSTR(MP_QSTR_CANIDFilter),         MP_ROM_PTR(&rp2_canidfilter_type) },
+    { MP_ROM_QSTR(MP_QSTR_CANError),            MP_ROM_PTR(&rp2_canerror_type) },
+    { MP_ROM_QSTR(MP_QSTR_MIN),                 MP_ROM_PTR(&rp2_min_type) },
 };
 STATIC MP_DEFINE_CONST_DICT(rp2_module_globals, rp2_module_globals_table);
 
Index: ports/rp2/machine_pin.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ports/rp2/machine_pin.c b/ports/rp2/machine_pin.c
--- a/ports/rp2/machine_pin.c	(revision 7c51cb2307eaca1a1ccc071e0bb5eb4a5f734610)
+++ b/ports/rp2/machine_pin.c	(date 1620461873731)
@@ -4,6 +4,7 @@
  * The MIT License (MIT)
  *
  * Copyright (c) 2016-2021 Damien P. George
+ * (Modifications to the code for the MCP2517/18FD CAN controller (c) 2021 Canis Automotive Labs)
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -67,6 +68,10 @@
     mp_irq_obj_t base;
     uint32_t flags;
     uint32_t trigger;
+
+    // Precompute a pointer to the relevant INTR register and an event mask to determine if it has happened
+    io_rw_32 *intr;
+    uint32_t event_mask;
 } machine_pin_irq_obj_t;
 
 STATIC const mp_irq_methods_t machine_pin_irq_methods;
@@ -104,25 +109,54 @@
     {{&machine_pin_type}, 29},
 };
 
+
+#include <inttypes.h>
+
+#include "canis/rp2_mcp251718fd.h"
+
 // Mask with "1" indicating that the corresponding pin is in simulated open-drain mode.
 uint32_t machine_pin_open_drain_mask;
 
-STATIC void gpio_irq(void) {
-    for (int i = 0; i < 4; ++i) {
-        uint32_t intr = iobank0_hw->intr[i];
-        if (intr) {
-            for (int j = 0; j < 8; ++j) {
-                if (intr & 0xf) {
-                    uint32_t gpio = 8 * i + j;
-                    gpio_acknowledge_irq(gpio, intr & 0xf);
-                    machine_pin_irq_obj_t *irq = MP_STATE_PORT(machine_pin_irq_obj[gpio]);
-                    if (irq != NULL && (intr & irq->trigger)) {
-                        irq->flags = intr & irq->trigger;
-                        mp_irq_handler(&irq->base);
-                    }
-                }
-                intr >>= 4;
-            }
+// This is an unused interrupt on the RP2040 and can be used as a handoff for handling GPIO interrupts
+// in MicroPython after the fast GPIO ISR has run.
+#define IO_IRQ_HANDOFF  (31U)
+
+// Mask to see if the MCP2518 has interrupted
+#define SPI_IRQ_LEVEL_MASK          1U << (4U * (SPI_IRQ_GPIO % 8U))
+
+STATIC  TIME_CRITICAL void gpio_irq(void) {
+    // If the CAN subsystem has been initialized
+    if (MP_STATE_PORT(rp2_can_obj) != NULL && (iobank0_hw->intr[SPI_IRQ_GPIO / 8] & SPI_IRQ_LEVEL_MASK)) {
+        // CANPico board has a level sensitive IRQ
+        //
+        // The core that is interrupted is programmed when the interrupt is enabled, and is set to the core
+        // that made the CAN() constructor call. The event for this interrupt and the core is fixed so there is no
+        // need to do any checking, and instead if the SPI_IRQ_GPIO pin has caused the IRQ then it is handled
+        // by this core.
+        mcp251718fd_irq_handler();
+    }
+
+    // This GPIO vector is shared, and needs to be of high priority to service the MCP2518. But
+    // accessing the rest of the MicroPython code could touch flash and run very slowly. So
+    // either go straight to the MCP2518 drivers or raise a deferred ISR on a vector lower
+    // priority (equal to the other ISRs). Can make an unused IRQ pending and direct that to
+    // the MicroPython GPIO vector handler.
+    //
+    // Hand off everything else to the MicroPython handler at lower priority; this requires that
+    // the IRQ is acknowledged here.
+
+    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+
+    // Scan through the interrupt handlers to see if any of them have occurred
+    for (uint32_t gpio = 0; gpio < MP_ARRAY_SIZE(machine_pin_obj); gpio++) {
+        machine_pin_irq_obj_t *irq = MP_STATE_PORT(machine_pin_irq_obj[gpio]);
+
+        if (irq != NULL && (*irq->intr & irq->event_mask)) {
+            irq->flags = *irq->intr & irq->event_mask;
+            // Acknowledge interrupt (if edge sensitive)
+            *irq->intr = irq->event_mask;
+            // TODO move to being handled in the hand-off ISR
+            mp_irq_handler(&irq->base);
         }
     }
 }
@@ -351,6 +385,12 @@
         irq->flags = 0;
         irq->trigger = args[ARG_trigger].u_int;
 
+        // Precompute interrupt status register to dismiss edge interrupts and detect interrupt events
+        irq->intr = &iobank0_hw->intr[self->id & 0x3U];
+        // Four events per interrupt (rising edge, falling edge, level high, level low)
+        // Eight interrupts per register
+        irq->event_mask = irq->trigger << ((self->id & 0x7U) << 2);
+
         // Enable IRQ if a handler is given.
         if (args[ARG_handler].u_obj != mp_const_none) {
             gpio_set_irq_enabled(self->id, args[ARG_trigger].u_int, true);
